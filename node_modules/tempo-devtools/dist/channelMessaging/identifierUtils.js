"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isElementInSvg = exports.isSkipNavTreeNode = exports.isMovingElement = exports.getAllUnknownClasses = exports.getAllUnknownClasesFromList = exports.isOutline = exports.hasClass = exports.removeUniqueLookupFromNode = exports.getUniqueLookupFromNode = exports.getElementKeyFromNode = exports.addCodebaseIdToNode = exports.addUniqueLookupAsClass = exports.addElementKeyAsClass = exports.getCodebaseIdFromNode = exports.getCodebaseIdFromClassName = exports.validateUuid = exports.KNOWN_ATTRIBUTES = exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD = exports.TEMPO_ELEMENT_ID = exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH = exports.TEMPO_OUTLINE_UNTIL_REFESH = exports.TEMPO_DELETE_AFTER_REFRESH = exports.TEMPO_INSTANT_UPDATE = exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE = exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS = exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX = exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE = exports.TEMPO_INSTANT_DIV_DRAW_CLASS = exports.EDIT_TEXT_BUTTON = exports.OUTLINE_CLASS = exports.UNIQUE_LOOKUP_PREFIX = exports.ELEMENT_KEY_PREFIX = void 0;
const changeItemFunctions_1 = require("./changeItemFunctions");
// Must match identifier utils on the frontend
exports.ELEMENT_KEY_PREFIX = 'arb89-key-';
exports.UNIQUE_LOOKUP_PREFIX = 'arb89-lookup-'; // Used only for processing the nav tree
exports.OUTLINE_CLASS = 'arb89-outline';
exports.EDIT_TEXT_BUTTON = 'arb89-edit-text-button';
exports.TEMPO_INSTANT_DIV_DRAW_CLASS = 'arb89-instant-div-draw';
exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE = 'arb89-move-between-parents-outline';
exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX = 'arb89-styling-';
exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS = 'arb89-display-none-until-refresh';
exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE = 'arb89-delete-after-instant-update';
const KNOWN_CLASSES = new Set([
    exports.OUTLINE_CLASS,
    exports.TEMPO_INSTANT_DIV_DRAW_CLASS,
    exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE,
    exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS,
    changeItemFunctions_1.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID,
    changeItemFunctions_1.TEMPORARY_STYLING_CLASS_NAME,
    exports.EDIT_TEXT_BUTTON,
]);
const KNOWN_CLASS_PREFIXES = [
    exports.ELEMENT_KEY_PREFIX,
    exports.UNIQUE_LOOKUP_PREFIX,
    exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX,
    changeItemFunctions_1.DUPLICATE_PLACEHOLDER_PREFIX,
    changeItemFunctions_1.ADD_JSX_PREFIX,
];
// Attributes that are set until the next Nav Tree Refresh
exports.TEMPO_INSTANT_UPDATE = 'arb89-instant-update';
exports.TEMPO_DELETE_AFTER_REFRESH = 'arb89-delete-after-refresh';
exports.TEMPO_OUTLINE_UNTIL_REFESH = 'arb89-outline-until-refresh';
exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH = 'arb89-do-not-show-in-nav';
exports.TEMPO_ELEMENT_ID = 'tempoelementid';
exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD = 'arb89-queue-delete-after-hot-reload';
exports.KNOWN_ATTRIBUTES = new Set([
    exports.TEMPO_INSTANT_UPDATE,
    exports.TEMPO_DELETE_AFTER_REFRESH,
    exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE,
    exports.TEMPO_OUTLINE_UNTIL_REFESH,
    exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD,
    exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH,
    exports.TEMPO_ELEMENT_ID,
]);
const validateUuid = (uuid) => {
    return new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i').test(uuid);
};
exports.validateUuid = validateUuid;
const getCodebaseIdFromClassName = (className) => {
    if (className &&
        className.startsWith('tempo-') &&
        ((0, exports.validateUuid)(className.substring('tempo-'.length)) ||
            className === changeItemFunctions_1.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID ||
            className.startsWith(changeItemFunctions_1.DUPLICATE_PLACEHOLDER_PREFIX))) {
        return className;
    }
    return null;
};
exports.getCodebaseIdFromClassName = getCodebaseIdFromClassName;
const getCodebaseIdFromNode = (node) => {
    var _a;
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return null;
    }
    let clsFound = null;
    node.classList.forEach((cls) => {
        // A bit of a hack -> in the case when there are multiple tempo codebase IDs on an element
        // we want to use the first one defined. This happens in the case of forward refs, and we
        // always add the bottom-most className to the end of the classes list, so we want to
        // show the top-most element in this case
        if (clsFound) {
            return;
        }
        if (!cls) {
            return;
        }
        const extractedId = (0, exports.getCodebaseIdFromClassName)(cls);
        if (extractedId) {
            clsFound = extractedId;
        }
    });
    if (clsFound) {
        return clsFound;
    }
    if (((_a = node === null || node === void 0 ? void 0 : node.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) == 'body') {
        return 'body';
    }
    if ((node === null || node === void 0 ? void 0 : node.id) == 'root') {
        return 'root';
    }
    if ((node === null || node === void 0 ? void 0 : node.id) == '__next') {
        return '__next';
    }
    return null;
};
exports.getCodebaseIdFromNode = getCodebaseIdFromNode;
const addElementKeyAsClass = (node, safeElementKey) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return;
    }
    const classesToRemove = new Set();
    node.classList.forEach((cls) => {
        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.ELEMENT_KEY_PREFIX)) {
            classesToRemove.add(cls);
        }
    });
    classesToRemove.forEach((cls) => {
        node.classList.remove(cls);
    });
    node.classList.add(`${exports.ELEMENT_KEY_PREFIX}${safeElementKey}`);
};
exports.addElementKeyAsClass = addElementKeyAsClass;
const addUniqueLookupAsClass = (node, uniqueLookup) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return;
    }
    const classesToRemove = new Set();
    node.classList.forEach((cls) => {
        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.UNIQUE_LOOKUP_PREFIX)) {
            classesToRemove.add(cls);
        }
    });
    classesToRemove.forEach((cls) => {
        node.classList.remove(cls);
    });
    node.classList.add(`${exports.UNIQUE_LOOKUP_PREFIX}${uniqueLookup}`);
};
exports.addUniqueLookupAsClass = addUniqueLookupAsClass;
const addCodebaseIdToNode = (node, codebaseId) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return;
    }
    const classesToRemove = new Set();
    node.classList.forEach((cls) => {
        if (!cls) {
            return;
        }
        if ((0, exports.getCodebaseIdFromClassName)(cls)) {
            classesToRemove.add(cls);
        }
    });
    classesToRemove.forEach((cls) => {
        node.classList.remove(cls);
    });
    node.classList.add(codebaseId);
};
exports.addCodebaseIdToNode = addCodebaseIdToNode;
const getElementKeyFromNode = (node) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return null;
    }
    let clsFound = null;
    node.classList.forEach((cls) => {
        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.ELEMENT_KEY_PREFIX)) {
            clsFound = cls.substring(exports.ELEMENT_KEY_PREFIX.length);
        }
    });
    return clsFound;
};
exports.getElementKeyFromNode = getElementKeyFromNode;
const getUniqueLookupFromNode = (node) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return null;
    }
    let clsFound = null;
    node.classList.forEach((cls) => {
        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.UNIQUE_LOOKUP_PREFIX)) {
            clsFound = cls.substring(exports.UNIQUE_LOOKUP_PREFIX.length);
        }
    });
    return clsFound;
};
exports.getUniqueLookupFromNode = getUniqueLookupFromNode;
const removeUniqueLookupFromNode = (node) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return false;
    }
    const classesToRemove = new Set();
    node.classList.forEach((cls) => {
        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.UNIQUE_LOOKUP_PREFIX)) {
            classesToRemove.add(cls);
        }
    });
    classesToRemove.forEach((cls) => {
        node.classList.remove(cls);
    });
    return classesToRemove.size > 0;
};
exports.removeUniqueLookupFromNode = removeUniqueLookupFromNode;
const hasClass = (node, klass) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return false;
    }
    let hasClass = false;
    node.classList.forEach((cls) => {
        if (cls == klass) {
            hasClass = true;
        }
    });
    return hasClass;
};
exports.hasClass = hasClass;
const isOutline = (node) => {
    return (0, exports.hasClass)(node, exports.OUTLINE_CLASS);
};
exports.isOutline = isOutline;
const getAllUnknownClasesFromList = (classes) => {
    return classes.filter((cls) => {
        if (!cls) {
            return false;
        }
        const isCodebaseId = (0, exports.getCodebaseIdFromClassName)(cls) !== null;
        const clsStartsWithKnownPrefix = KNOWN_CLASS_PREFIXES.some((prefix) => cls.startsWith(prefix));
        if (!clsStartsWithKnownPrefix && !KNOWN_CLASSES.has(cls) && !isCodebaseId) {
            return true;
        }
        return false;
    });
};
exports.getAllUnknownClasesFromList = getAllUnknownClasesFromList;
const getAllUnknownClasses = (node) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return [];
    }
    return (0, exports.getAllUnknownClasesFromList)(Array.from(node.classList));
};
exports.getAllUnknownClasses = getAllUnknownClasses;
/**
 * Accepts a node from mutation observer and determines if it's a moving element.
 * Returns moving if and only if the node has the attribute `arb89-instant-update` set to true.
 * @param node
 * @returns
 */
const isMovingElement = (node) => {
    if (!node) {
        return false;
    }
    // Check if the node responds to getAttribute method.
    if (typeof node.getAttribute !== 'function') {
        return false;
    }
    return node.getAttribute(exports.TEMPO_INSTANT_UPDATE) === 'true';
};
exports.isMovingElement = isMovingElement;
const isSkipNavTreeNode = (node) => {
    if (!node) {
        return;
    }
    return node.getAttribute(exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH) === 'true';
};
exports.isSkipNavTreeNode = isSkipNavTreeNode;
/**
 * Check if the node has any parent that is an svg tag
 */
const isElementInSvg = (node, parent) => {
    var _a;
    if (!node) {
        return false;
    }
    if (parent && ((_a = node.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'svg') {
        return true;
    }
    if (node.parentNode) {
        return (0, exports.isElementInSvg)(node.parentNode, true);
    }
    return false;
};
exports.isElementInSvg = isElementInSvg;
