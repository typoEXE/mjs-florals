"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initChannelMessaging = void 0;
// KEEP THIS IN SYNC WITH sessionStorageUtils.*.tsx
const resqUtils_1 = require("./resqUtils");
const lz_string_1 = __importDefault(require("lz-string"));
const posthog_js_1 = __importDefault(require("../posthog.js"));
const channelMessagingFunctions_1 = require("./channelMessagingFunctions");
// For vite only, show errors in the browser
if (typeof window !== 'undefined' &&
    window.location.href.includes('framework=VITE')) {
    const showErrorOverlay = (err) => {
        // must be within function call because that's when the element is defined for sure.
        const ErrorOverlay = customElements.get('vite-error-overlay');
        // don't open outside vite environment
        if (!ErrorOverlay) {
            return;
        }
        const overlay = new ErrorOverlay(err);
        document.body.appendChild(overlay);
    };
    window.addEventListener('error', showErrorOverlay);
    window.addEventListener('unhandledrejection', ({ reason }) => showErrorOverlay(reason));
}
const debugLogInDev = (...str) => {
    var _a;
    // Only in dev
    if ((_a = window.location.search) === null || _a === void 0 ? void 0 : _a.includes('debugLog=true')) {
        console.debug(...str);
    }
};
function initChannelMessaging() {
    var _a;
    if (typeof window !== 'undefined') {
        (0, channelMessagingFunctions_1.initChannelMessagingFunctions)();
        // Only in prod
        if (window.location.hostname.endsWith('dev.tempolabs.ai') &&
            !window.location.hostname.endsWith('staging-dev.tempolabs.ai')) {
            if (posthog_js_1.default) {
                posthog_js_1.default.init();
            }
        }
    }
    if (typeof window !== 'undefined') {
        window.addEventListener('message', (event) => {
            const { data } = event;
            if (data.type === 'GET_STATE_AND_PROPS') {
                const { componentName } = data;
                // TODO: Support custom root that user provides
                let rootSelector = '#root';
                if (!document.querySelector(rootSelector)) {
                    rootSelector = '#__next';
                }
                const root = document.querySelector(rootSelector);
                const rootReactElement = (0, resqUtils_1.getRootReactElement)();
                const tree = (0, resqUtils_1.buildNodeTree)(rootReactElement, null);
                const foundNodes = (0, resqUtils_1.findElementInTree)(tree, (node) => {
                    if (componentName && node.name == componentName) {
                        return true;
                    }
                    return false;
                });
                if (!(foundNodes === null || foundNodes === void 0 ? void 0 : foundNodes.length)) {
                    const message = {
                        error: 'No component found',
                    };
                    console.log('STATE_AND_PROPS ', JSON.stringify(message));
                    return;
                }
                if (foundNodes.length > 1) {
                    console.log(foundNodes);
                    console.log('Warning: more than 1 component found');
                }
                const foundNode = foundNodes[0];
                const sendDataForNode = (node) => {
                    debugLogInDev('NODE FOUND: ', node);
                    const PROPS_TO_EXCLUDE = {
                        tempoelementid: true,
                    };
                    const propsToSend = {};
                    if (node.props) {
                        Object.keys(node.props).forEach((key) => {
                            if (!PROPS_TO_EXCLUDE[key]) {
                                if (typeof node.props[key] === 'object') {
                                    propsToSend[key] = 'TEMPO_OBJECT_TYPE';
                                }
                                else if (typeof node.props[key] === 'function') {
                                    propsToSend[key] = 'TEMPO_FUNCTION_TYPE';
                                }
                                else {
                                    propsToSend[key] = node.props[key];
                                }
                            }
                        });
                    }
                    // TODO: This doesn't fully work because of this bug: https://github.com/baruchvlz/resq/issues/85
                    let stateToSend = {};
                    if (node.state) {
                        if (typeof node.state === 'string') {
                            stateToSend = {
                                state: node.state,
                            };
                        }
                        else {
                            Object.keys(node.state).forEach((key) => {
                                if (typeof node.state[key] === 'object') {
                                    stateToSend[key] = 'TEMPO_OBJECT_TYPE';
                                }
                                else if (typeof node.state[key] === 'function') {
                                    stateToSend[key] = 'TEMPO_FUNCTION_TYPE';
                                }
                                else {
                                    stateToSend[key] = node.state[key];
                                }
                            });
                        }
                    }
                    const message = {
                        id: data.id,
                        props: propsToSend,
                        state: stateToSend,
                    };
                    console.log('STATE_AND_PROPS ', JSON.stringify(message));
                };
                sendDataForNode(foundNode);
            }
        });
    }
    if (typeof window !== 'undefined') {
        if ((_a = window.location.search) === null || _a === void 0 ? void 0 : _a.includes('storyboard=true')) {
            let rootEl = document.getElementById('root');
            if (!rootEl) {
                rootEl = document.getElementById('__next');
            }
            if (rootEl) {
                if (window.location.search.includes('type=STORY') ||
                    window.location.search.includes('type=COMPONENT')) {
                    [rootEl, document.body, document.documentElement].forEach((el) => {
                        el.style.backgroundColor = 'transparent';
                        el.style.width = '100vw';
                        el.style.height = '100vh';
                        el.style.overflow = 'hidden';
                    });
                }
                else {
                    rootEl.style.width = '100vw';
                    rootEl.style.height = '100vh';
                }
            }
        }
        (function () {
            let port2 = null;
            let storyboardId = null;
            // Setup the transfered port
            const initPort = (e) => {
                if (e.data === 'init') {
                    port2 = e.ports[0];
                    port2.onmessage = onMessage;
                }
                else {
                    var msgObj = e.data;
                    onMessage({
                        data: msgObj,
                    });
                }
            };
            // Listen for the intial port transfer message
            window.addEventListener('message', initPort);
            const onInspectElement = (data) => __awaiter(this, void 0, void 0, function* () {
                if (!data.payload.componentName) {
                    console.log('NO COMPONENT NAME');
                    const message = {
                        id: data.id,
                        error: 'No component name',
                    };
                    port2.postMessage(message);
                    return;
                }
                // TODO: Support custom root that user provides
                const rootReactElement = (0, resqUtils_1.getRootReactElement)();
                const tree = (0, resqUtils_1.buildNodeTree)(rootReactElement, null);
                const { isComponent, componentName, tempoElementID, componentElementId, } = data.payload;
                if (!isComponent && !tempoElementID) {
                    console.log('No tempo element ID provided');
                    const message = {
                        id: data.id,
                        error: 'Could not find element',
                    };
                    port2.postMessage(message);
                    return;
                }
                if (isComponent && !tempoElementID && !componentName) {
                    console.log('No tempo element ID or component name provided');
                    const message = {
                        id: data.id,
                        error: 'Could not find component',
                    };
                    port2.postMessage(message);
                    return;
                }
                const foundNodes = (0, resqUtils_1.findElementInTree)(tree, (node) => {
                    var _a, _b, _c;
                    if (isComponent) {
                        // Check tempoElementID, and if it's not provided, use the component name
                        if (tempoElementID &&
                            ((_a = node.props) === null || _a === void 0 ? void 0 : _a.tempoelementid) == tempoElementID) {
                            return true;
                        }
                        if (!tempoElementID &&
                            componentName &&
                            node.name == componentName) {
                            return true;
                        }
                    }
                    else {
                        // The tempo element ID must always match
                        if (tempoElementID &&
                            ((_b = node.props) === null || _b === void 0 ? void 0 : _b.tempoelementid) !== tempoElementID) {
                            return false;
                        }
                        // If the component instance ID is provided, go up the chain to check if there are any parents with this component instance ID set
                        if (componentElementId) {
                            let nodeToCheck = node.parent;
                            let foundMatchingComponent = false;
                            while (nodeToCheck) {
                                if (((_c = nodeToCheck.props) === null || _c === void 0 ? void 0 : _c.tempoelementid) === componentElementId) {
                                    foundMatchingComponent = true;
                                    break;
                                }
                                nodeToCheck = nodeToCheck.parent;
                            }
                            if (!foundMatchingComponent) {
                                return false;
                            }
                        }
                        return true;
                    }
                    return false;
                });
                if (!(foundNodes === null || foundNodes === void 0 ? void 0 : foundNodes.length)) {
                    debugLogInDev('NO COMPONENT FOUND');
                    const message = {
                        id: data.id,
                        error: 'No component found',
                    };
                    port2.postMessage(message);
                    return;
                }
                if (foundNodes.length > 1) {
                    console.log(foundNodes);
                    console.log('Warning: more than 1 component found');
                }
                const foundNode = foundNodes[0];
                const sendDataForNode = (node) => {
                    debugLogInDev('NODE FOUND: ', node);
                    const propsToSend = {};
                    if (node.props) {
                        Object.keys(node.props).forEach((key) => {
                            if (typeof node.props[key] === 'object') {
                                propsToSend[key] = 'TEMPO_OBJECT_TYPE';
                            }
                            else if (typeof node.props[key] === 'function') {
                                propsToSend[key] = 'TEMPO_FUNCTION_TYPE';
                            }
                            else {
                                propsToSend[key] = node.props[key];
                            }
                        });
                    }
                    // TODO: This doesn't fully work because of this bug: https://github.com/baruchvlz/resq/issues/85
                    let stateToSend = {};
                    if (node.state) {
                        if (typeof node.state === 'string') {
                            stateToSend = {
                                state: node.state,
                            };
                        }
                        else {
                            Object.keys(node.state).forEach((key) => {
                                if (typeof node.state[key] === 'object') {
                                    stateToSend[key] = 'TEMPO_OBJECT_TYPE';
                                }
                                else if (typeof node.state[key] === 'function') {
                                    stateToSend[key] = 'TEMPO_FUNCTION_TYPE';
                                }
                                else {
                                    stateToSend[key] = node.state[key];
                                }
                            });
                        }
                    }
                    const message = {
                        id: data.id,
                        props: propsToSend,
                        state: stateToSend,
                    };
                    debugLogInDev('RESPONDING WITH: ', message);
                    port2.postMessage(message);
                };
                sendDataForNode(foundNode);
            });
            // Handle messages received on port2
            const onMessage = (e) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                try {
                    const data = e.data;
                    const dataToLog = Object.assign({}, data);
                    if ((_a = data === null || data === void 0 ? void 0 : data.payload) === null || _a === void 0 ? void 0 : _a.compressedArgs) {
                        dataToLog.payload = Object.assign(Object.assign({}, data.payload), { compressedArgs: 'COMPRESSED' });
                    }
                    // These contain args that are too large to log
                    const LOGS_TO_SKIP_ARGS = [
                        'initProject',
                        'setNewLookups',
                        'processRulesForSelectedElement',
                    ];
                    if (((_b = data === null || data === void 0 ? void 0 : data.payload) === null || _b === void 0 ? void 0 : _b.functionName) &&
                        LOGS_TO_SKIP_ARGS.includes(data.payload.functionName)) {
                        dataToLog.payload = Object.assign(Object.assign({}, data.payload), { args: 'ARGS_SKIPPED' });
                    }
                    debugLogInDev('INNER FRAME: Received message from parent: ', JSON.stringify(dataToLog));
                    if (!data || !data.payload) {
                        debugLogInDev('NO PAYLOAD');
                        return;
                    }
                    if (!data.id) {
                        debugLogInDev('NO ID');
                        return;
                    }
                    if (data.type === 'inspectElement') {
                        onInspectElement(data);
                    }
                    else if (data.type === 'executeFunction') {
                        const fn = window[data.payload.functionName];
                        if (typeof fn === 'function') {
                            // Special case to register the storyboardId
                            let args = data.payload.args;
                            if (data.payload.compressedArgs) {
                                args = JSON.parse(lz_string_1.default.decompress(data.payload.compressedArgs));
                            }
                            if (data.payload.functionName === 'initProject') {
                                storyboardId = args[0];
                                args = args.slice(1);
                            }
                            let res = null;
                            if (data.payload.args) {
                                // @ts-ignore
                                res = fn(port2, storyboardId, ...args);
                            }
                            else {
                                // @ts-ignore
                                res = fn(port2, storyboardId);
                            }
                            if (res) {
                                port2.postMessage({
                                    id: data.id,
                                    result: res,
                                });
                            }
                        }
                        else {
                            console.log('INNER FRAME ERROR: Function to execute not found');
                        }
                    }
                }
                catch (error) {
                    console.log('INNER FRAME ERROR: ', error);
                    // TODO: Send error back to parent?
                }
            });
        })();
    }
}
exports.initChannelMessaging = initChannelMessaging;
