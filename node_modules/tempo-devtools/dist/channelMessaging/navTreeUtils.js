"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runNavTreeBuiltCallbacks = exports.addNavTreeBuiltCallback = exports.buildNavForNode = exports.getNavNodeForVirtualComponent = exports.ExtractedPropType = exports.SKIP_ROOT_CODEBASE_ID = exports.EMPTY_TREE_CODEBASE_ID = exports.TOP_LEVEL_PARENT_COMPONENT_TO_SKIP = exports.UNKNOWN_PARENT_COMPONENT = void 0;
const cssFunctions_1 = require("./cssFunctions");
const identifierUtils_1 = require("./identifierUtils");
const outlineUtils_1 = require("./outlineUtils");
const jquery_1 = __importDefault(require("jquery"));
const sessionStorageUtils_1 = require("./sessionStorageUtils");
const tempoElement_1 = require("./tempoElement");
exports.UNKNOWN_PARENT_COMPONENT = 'UnknownComponent';
exports.TOP_LEVEL_PARENT_COMPONENT_TO_SKIP = 'TOP_LEVEL_PARENT_COMPONENT_TO_SKIP';
exports.EMPTY_TREE_CODEBASE_ID = 'EMPTY-TREE';
// Special codebase ID -> if set on the root node it's expected it doesn't get rendered
// This is used when there are multiple nodes under the root node that we want to return while we don't
// want to render the root node itself
exports.SKIP_ROOT_CODEBASE_ID = 'SKIP-ROOT';
// Matches the interface on the frontend
var ExtractedPropType;
(function (ExtractedPropType) {
    ExtractedPropType["LITERAL"] = "LITERAL";
    ExtractedPropType["FUNCTION"] = "FUNCTION";
    ExtractedPropType["JSON_OBJECT"] = "JSON_OBJECT";
})(ExtractedPropType || (exports.ExtractedPropType = ExtractedPropType = {}));
const extractPropsFromReactFiberNode = (reactFiberNode) => {
    var _a;
    if (!((_a = reactFiberNode === null || reactFiberNode === void 0 ? void 0 : reactFiberNode.element) === null || _a === void 0 ? void 0 : _a.memoizedProps)) {
        return {};
    }
    const props = {};
    Object.keys(reactFiberNode.element.memoizedProps).forEach((key) => {
        if (key === 'children') {
            return;
        }
        // Filter out known props
        if (identifierUtils_1.KNOWN_ATTRIBUTES.has(key.toLowerCase())) {
            return;
        }
        let propValue = reactFiberNode.element.memoizedProps[key];
        // Filter out unknown classes
        if (key === 'className' && typeof propValue === 'string') {
            propValue = (0, identifierUtils_1.getAllUnknownClasesFromList)(propValue.split(' ')).join(' ');
        }
        if (typeof propValue === 'function') {
            props[key] = {
                value: key,
                type: ExtractedPropType.FUNCTION,
            };
        }
        else if (typeof propValue === 'object') {
            try {
                props[key] = {
                    value: JSON.stringify(propValue),
                    type: ExtractedPropType.JSON_OBJECT,
                };
            }
            catch (e) {
                // skip this prop
            }
        }
        else {
            props[key] = {
                value: propValue,
                type: ExtractedPropType.LITERAL,
            };
        }
    });
    return props;
};
const extractLiteralChildrenFromReactFiberNode = (reactFiberNode) => {
    var _a, _b;
    if (!((_b = (_a = reactFiberNode === null || reactFiberNode === void 0 ? void 0 : reactFiberNode.element) === null || _a === void 0 ? void 0 : _a.memoizedProps) === null || _b === void 0 ? void 0 : _b.children)) {
        return [];
    }
    const literalChildren = [];
    Array.from(reactFiberNode.element.memoizedProps.children || []).forEach((childProp, index) => {
        if (typeof childProp !== 'object') {
            literalChildren.push({
                index,
                value: childProp,
            });
        }
    });
    return literalChildren;
};
function selectorSafe(uniquePath) {
    // Dictionary of replacements. You can expand this list as needed.
    const replacements = {
        '!': '_exclamation_',
        '@': '_at_',
        '#': '_hash_',
        $: '_dollar_',
        '%': '_percent_',
        '^': '_caret_',
        '&': '_and_',
        '*': '_asterisk_',
        '(': '_openParen_',
        ')': '_closeParen_',
        '+': '_plus_',
        '=': '_equals_',
        '[': '_openBracket_',
        ']': '_closeBracket_',
        '{': '_openBrace_',
        '}': '_closeBrace_',
        '|': '_pipe_',
        ';': '_semicolon_',
        ':': '_colon_',
        ',': '_comma_',
        '.': '_period_',
        '<': '_lessThan_',
        '>': '_greaterThan_',
        '/': '_slash_',
        '?': '_question_',
        '\\': '_backslash_',
        ' ': '_space_',
    };
    // Replace each character with its mapped value
    Object.keys(replacements).forEach((character) => {
        const regex = new RegExp('\\' + character, 'g');
        uniquePath = uniquePath.replace(regex, replacements[character]);
    });
    // Handle invalid starting characters
    uniquePath = uniquePath.replace(/^[0-9-]/, '_startNumOrHyphen_');
    // Lastly, replace any remaining non-alphanumeric characters just in case
    return uniquePath.replace(/[^a-zA-Z0-9_-]/g, '_');
}
/**
 * Nav node for a component that has no DOM element associated with it
 */
const getNavNodeForVirtualComponent = (parent, componentName, componentInstanceId, uniquePath, scopeLookup, storyboardId, reactFiberNode) => {
    const navTreeNode = {
        parent: parent,
        children: [],
        classList: [],
        directlySetClassList: [],
        name: '',
        tempoElement: tempoElement_1.TempoElement.empty(),
    };
    navTreeNode.name = componentName;
    navTreeNode.isComponent = true;
    navTreeNode.tempoElement = new tempoElement_1.TempoElement(componentInstanceId, storyboardId, uniquePath);
    navTreeNode.props = extractPropsFromReactFiberNode(reactFiberNode);
    navTreeNode.literalChildren =
        extractLiteralChildrenFromReactFiberNode(reactFiberNode);
    Object.keys(scopeLookup).forEach((codebaseId) => {
        var _a;
        if (navTreeNode.scope) {
            return;
        }
        if (((_a = scopeLookup[codebaseId].codebaseIds) === null || _a === void 0 ? void 0 : _a.indexOf(componentInstanceId)) > -1) {
            navTreeNode.scope = scopeLookup[codebaseId];
        }
    });
    return navTreeNode;
};
exports.getNavNodeForVirtualComponent = getNavNodeForVirtualComponent;
const buildNavForNode = (storyboardId, parent, node, uniquePathBase, uniquePathAddon, scopeLookup, treeElements, lookupIdToReactTreeMap, knownComponentNames, knownComponentInstanceNames, 
// Gets populated by this function, a lookup of element key -> list of element keys that represent this virtual component
elementKeyToLookupList, elementKeyToNavNode) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    if (!node) {
        return null;
    }
    if ((0, outlineUtils_1.isNodeOutline)(node)) {
        return null;
    }
    if ((0, identifierUtils_1.isSkipNavTreeNode)(node)) {
        return null;
    }
    if (['noscript', 'script'].includes((_a = node === null || node === void 0 ? void 0 : node.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase())) {
        return null;
    }
    const foundId = (0, identifierUtils_1.getCodebaseIdFromNode)(node);
    const reactFiberLookupId = (0, identifierUtils_1.getUniqueLookupFromNode)(node);
    // May 15, 2023 -> found bug where a random iframe was being added with the hot reloaded code
    // I think this is related to this bug:
    // https://github.com/facebook/create-react-app/issues/11880
    if (((_b = node === null || node === void 0 ? void 0 : node.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'iframe') {
        if (!foundId) {
            node.remove();
            return null;
        }
    }
    let reactFiberNode = null;
    if (reactFiberLookupId) {
        reactFiberNode = lookupIdToReactTreeMap[reactFiberLookupId];
    }
    const boundingRect = node.getBoundingClientRect();
    const { top, left } = (0, jquery_1.default)(node).offset() || { top: 0, left: 0 };
    let parentToUse = parent;
    let uniquePathBaseToUse = uniquePathBase;
    //////////////////////////////////////////////////////////////////
    // Handle virtual components from the react fiber tree
    //////////////////////////////////////////////////////////////////
    // For outlines, components that are added need an outline around all the elements inside
    // Create lookups in local storage to keep track of this
    // Element keys of virtual components
    const virtualComponentElementKeys = [];
    // When there are react forward refs we want to collapse the node into the top level forward ref
    let componentNameToCollapseInto;
    let componentInstanceIdToCollapseInto;
    if (reactFiberNode && (parent === null || parent === void 0 ? void 0 : parent.reactFiberNode)) {
        // Traverse up the stack adding components to the tree until you hit this node's parent
        // Note, we have to account for other children that already performed this operation and added nodes to the tree
        let searchNode = reactFiberNode.parent;
        let possibleNodesToAdd = [];
        // This loop picks all the relevant nodes in between (ignoring if they are already added or not)
        while (searchNode) {
            if (searchNode === parent.reactFiberNode) {
                break;
            }
            // Sometimes components are named differently in the react fiber tree from the codebase, but we still want to include them
            // in the DOM tree if they are components defined in source files
            // E.g. in next JS if you create a <Link /> element it will be called "LinkComponent"
            const debugSourceFileInCodebase = ((_d = (_c = searchNode === null || searchNode === void 0 ? void 0 : searchNode.element) === null || _c === void 0 ? void 0 : _c._debugSource) === null || _d === void 0 ? void 0 : _d.fileName) &&
                !((_g = (_f = (_e = searchNode === null || searchNode === void 0 ? void 0 : searchNode.element) === null || _e === void 0 ? void 0 : _e._debugSource) === null || _f === void 0 ? void 0 : _f.fileName) === null || _g === void 0 ? void 0 : _g.includes('node_modules'));
            if (((_h = searchNode.props) === null || _h === void 0 ? void 0 : _h.tempoelementid) &&
                ((knownComponentNames === null || knownComponentNames === void 0 ? void 0 : knownComponentNames.has(searchNode.name)) ||
                    (knownComponentInstanceNames === null || knownComponentInstanceNames === void 0 ? void 0 : knownComponentInstanceNames.has(searchNode.name)) ||
                    debugSourceFileInCodebase)) {
                possibleNodesToAdd.push(searchNode);
            }
            searchNode = searchNode.parent;
        }
        // Found the parent, traverse down the nodes, checking if that node was already added to the tree,
        // and adding it if it wasn't
        if (searchNode && possibleNodesToAdd.length) {
            let currentParent = parent;
            Array.from(possibleNodesToAdd)
                .reverse()
                .forEach((nodeToAdd) => {
                var _a, _b, _c, _d, _e, _f, _g;
                // If this is a forward ref just move forward in the tree without adding this element, but
                // but still label the next non-forward ref with this node's name & instance ID
                // However, only do this the first time (want the highest forward ref)
                if (((_c = (_b = (_a = nodeToAdd === null || nodeToAdd === void 0 ? void 0 : nodeToAdd.element) === null || _a === void 0 ? void 0 : _a.elementType) === null || _b === void 0 ? void 0 : _b['$$typeof']) === null || _c === void 0 ? void 0 : _c.toString()) ===
                    'Symbol(react.forward_ref)') {
                    if (!componentNameToCollapseInto &&
                        !componentInstanceIdToCollapseInto) {
                        componentInstanceIdToCollapseInto =
                            (_d = nodeToAdd.props) === null || _d === void 0 ? void 0 : _d.tempoelementid;
                        const referenceTreeElement = treeElements[componentInstanceIdToCollapseInto || ''];
                        if ((referenceTreeElement === null || referenceTreeElement === void 0 ? void 0 : referenceTreeElement.type) === 'component-instance') {
                            componentNameToCollapseInto =
                                referenceTreeElement.componentName;
                        }
                        else {
                            componentNameToCollapseInto = nodeToAdd.name;
                        }
                    }
                    return;
                }
                const matchingNavTreeNode = currentParent
                    ? (_e = currentParent.children) === null || _e === void 0 ? void 0 : _e.find((child) => child.reactFiberNode === nodeToAdd)
                    : null;
                // Node already matches, increase level and continue
                if (matchingNavTreeNode) {
                    currentParent = matchingNavTreeNode;
                    if (currentParent.tempoElement) {
                        virtualComponentElementKeys.push(currentParent.tempoElement.getKey());
                    }
                    // Increase the size of the bounding box for this element
                    if (!matchingNavTreeNode.pageBoundingBox) {
                        matchingNavTreeNode.pageBoundingBox = {
                            pageX: left,
                            pageY: top,
                            width: boundingRect.width,
                            height: boundingRect.height,
                        };
                    }
                    else {
                        const newRight = Math.max(matchingNavTreeNode.pageBoundingBox.pageX +
                            matchingNavTreeNode.pageBoundingBox.width, left + boundingRect.width);
                        const newLeft = Math.min(matchingNavTreeNode.pageBoundingBox.pageX, boundingRect.left);
                        const newTop = Math.min(matchingNavTreeNode.pageBoundingBox.pageY, boundingRect.top);
                        const newBottom = Math.max(matchingNavTreeNode.pageBoundingBox.pageY +
                            matchingNavTreeNode.pageBoundingBox.height, top + boundingRect.height);
                        matchingNavTreeNode.pageBoundingBox.pageX = newLeft;
                        matchingNavTreeNode.pageBoundingBox.pageY = newTop;
                        matchingNavTreeNode.pageBoundingBox.width = newRight - newLeft;
                        matchingNavTreeNode.pageBoundingBox.height = newBottom - newTop;
                    }
                    return;
                }
                else {
                    // Otherwise, create a new virtual node, add to parent and continue
                    let componentName;
                    let componentInstanceId;
                    if (componentNameToCollapseInto) {
                        componentName = componentInstanceIdToCollapseInto;
                        componentInstanceId = componentInstanceIdToCollapseInto;
                        componentNameToCollapseInto = undefined;
                        componentInstanceIdToCollapseInto = undefined;
                    }
                    else {
                        componentName = nodeToAdd.name;
                        componentInstanceId = (_f = nodeToAdd.props) === null || _f === void 0 ? void 0 : _f.tempoelementid;
                    }
                    // Update the unique path and use it
                    uniquePathBaseToUse = selectorSafe(`${uniquePathBaseToUse}-${((_g = currentParent === null || currentParent === void 0 ? void 0 : currentParent.children) === null || _g === void 0 ? void 0 : _g.length) || 0}`);
                    const newVirtualComponent = (0, exports.getNavNodeForVirtualComponent)(currentParent, nodeToAdd.name, componentInstanceId, uniquePathBaseToUse, scopeLookup, storyboardId, nodeToAdd);
                    currentParent.children.push(newVirtualComponent);
                    currentParent = newVirtualComponent;
                    virtualComponentElementKeys.push(newVirtualComponent.tempoElement.getKey());
                    elementKeyToNavNode[newVirtualComponent.tempoElement.getKey()] =
                        newVirtualComponent;
                    // Set the bounding box for the new virtual component
                    newVirtualComponent.pageBoundingBox = {
                        pageX: left,
                        pageY: top,
                        width: boundingRect.width,
                        height: boundingRect.height,
                    };
                }
            });
            parentToUse = currentParent;
        }
    }
    // This node corresponds to the DOM element, not any components, unless we are collapsing into the component
    const navTreeNode = {
        parent: parentToUse,
        children: [],
        classList: (0, identifierUtils_1.getAllUnknownClasses)(node),
        directlySetClassList: [],
        name: '',
        tempoElement: tempoElement_1.TempoElement.empty(),
    };
    (_j = parentToUse === null || parentToUse === void 0 ? void 0 : parentToUse.children) === null || _j === void 0 ? void 0 : _j.push(navTreeNode);
    navTreeNode.name = componentNameToCollapseInto || node.tagName;
    navTreeNode.elementTagName = node.tagName;
    // These are only forward ref components, all other components are added as virtual components
    navTreeNode.isComponent = Boolean(componentInstanceIdToCollapseInto);
    const uniquePathForNode = selectorSafe(`${uniquePathBaseToUse}${uniquePathAddon}`);
    const codebaseId = componentInstanceIdToCollapseInto || foundId || undefined;
    navTreeNode.tempoElement = new tempoElement_1.TempoElement(codebaseId, storyboardId, uniquePathForNode);
    const nodeElementKey = navTreeNode.tempoElement.getKey();
    // Using the virtualComponentElementKeys, set the elementKey in a list for this element
    virtualComponentElementKeys.forEach((elementKey) => {
        if (elementKeyToLookupList[elementKey]) {
            elementKeyToLookupList[elementKey].push(nodeElementKey);
        }
        else {
            elementKeyToLookupList[elementKey] = [nodeElementKey];
        }
    });
    // Set the lookup list for the specific node itself as well
    elementKeyToLookupList[nodeElementKey] = [nodeElementKey];
    // Add the element key to the class to help with referencing
    // Note - even if there is no codebase ID we still mark it as something processed in the nav tree
    (0, identifierUtils_1.addElementKeyAsClass)(node, nodeElementKey);
    const treeElementForNode = treeElements[navTreeNode.tempoElement.codebaseId];
    if (treeElementForNode) {
        const removableClasses = new Set((treeElementForNode === null || treeElementForNode === void 0 ? void 0 : treeElementForNode.removableClasses) || []);
        navTreeNode.directlySetClassList = (_k = navTreeNode.classList) === null || _k === void 0 ? void 0 : _k.filter((cls) => {
            return removableClasses.has(cls);
        });
    }
    navTreeNode.reactFiberNode = reactFiberNode;
    navTreeNode.props = extractPropsFromReactFiberNode(reactFiberNode);
    navTreeNode.literalChildren =
        extractLiteralChildrenFromReactFiberNode(reactFiberNode);
    navTreeNode.pageBoundingBox = {
        pageX: left,
        pageY: top,
        width: boundingRect.width,
        height: boundingRect.height,
    };
    navTreeNode.displayType = (0, cssFunctions_1.cssEval)(node, 'display');
    navTreeNode.positionType = (0, cssFunctions_1.cssEval)(node, 'position');
    navTreeNode.flexDirection = (0, cssFunctions_1.cssEval)(node, 'flex-direction');
    navTreeNode.floatVal = (0, cssFunctions_1.cssEval)(node, 'float');
    if (navTreeNode.tempoElement.codebaseId) {
        Object.keys(scopeLookup).forEach((codebaseId) => {
            var _a;
            if (navTreeNode.scope) {
                return;
            }
            if (((_a = scopeLookup[codebaseId].codebaseIds) === null || _a === void 0 ? void 0 : _a.indexOf(navTreeNode.tempoElement.codebaseId)) > -1) {
                navTreeNode.scope = scopeLookup[codebaseId];
            }
        });
    }
    // Only parse children for non-svg elements
    if (node.children && node.tagName !== 'svg') {
        let indexForUniqueness = 0;
        Array.from(node.children).forEach((child) => {
            (0, exports.buildNavForNode)(storyboardId, navTreeNode, child, uniquePathForNode, `-${indexForUniqueness}`, scopeLookup, treeElements, lookupIdToReactTreeMap, knownComponentNames, knownComponentInstanceNames, elementKeyToLookupList, elementKeyToNavNode);
            indexForUniqueness += 1;
        });
    }
    elementKeyToNavNode[nodeElementKey] = navTreeNode;
    // This is the top-level node
    if (!parentToUse) {
        let newNavTree = filterOutNodesWithoutCodebaseId(navTreeNode, elementKeyToNavNode, treeElements, storyboardId);
        return newNavTree;
    }
    return null;
};
exports.buildNavForNode = buildNavForNode;
const filterOutNodesWithoutCodebaseId = (finishedNavTree, elementKeyToNavNode, treeElements, storyboardId) => {
    let treeToReturn = finishedNavTree;
    const storyboardType = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.STORYBOARD_TYPE) || 'APPLICATION';
    const storyboardSavedComponentFile = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SAVED_STORYBOARD_COMPONENT_FILENAME);
    const originalStoryboardUrl = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.ORIGINAL_STORYBOARD_URL);
    const userNavigatedToNewRoute = originalStoryboardUrl &&
        !window.location.href.includes(originalStoryboardUrl);
    /**
     * Returns whether the given tree element is in the top-level file of the storyboard
     * Note - for saved components the top-level file is the saved component file
     */
    const isElementDirectlyInStoryboard = (node) => {
        var _a, _b, _c, _d, _e;
        const filename = (_a = treeElements[node.tempoElement.codebaseId]) === null || _a === void 0 ? void 0 : _a.filename;
        // For stories, just filter for anything not in _app or _document
        if (storyboardType === 'STORY' &&
            filename &&
            !filename.includes('_app') &&
            !filename.includes('_document')) {
            return true;
        }
        // Special case -> if the parent is the body element this might be in a portal
        // go all the way up the react fiber tree and see if there are any elements
        // that are in the storyboard
        if (((_b = node.parent) === null || _b === void 0 ? void 0 : _b.name) === 'BODY') {
            let parentFiberNode = (_c = node.reactFiberNode) === null || _c === void 0 ? void 0 : _c.parent;
            while (parentFiberNode) {
                const codebaseId = ((_d = parentFiberNode === null || parentFiberNode === void 0 ? void 0 : parentFiberNode.props) === null || _d === void 0 ? void 0 : _d.tempoelementid) || '';
                if (codebaseId) {
                    const treeElementFilename = (_e = treeElements[codebaseId]) === null || _e === void 0 ? void 0 : _e.filename;
                    const valid = Boolean(treeElementFilename === null || treeElementFilename === void 0 ? void 0 : treeElementFilename.includes('tempobook/storyboards')) ||
                        Boolean(treeElementFilename &&
                            treeElementFilename === storyboardSavedComponentFile);
                    if (valid) {
                        return true;
                    }
                }
                parentFiberNode = parentFiberNode === null || parentFiberNode === void 0 ? void 0 : parentFiberNode.parent;
            }
        }
        // For everything else, filter anything that is not in the storyboard itself
        return (Boolean(filename === null || filename === void 0 ? void 0 : filename.includes('tempobook/storyboards')) ||
            Boolean(filename && filename === storyboardSavedComponentFile));
    };
    const processNode = (node, elementInStoryboardFound) => {
        var _a, _b;
        // Process the children first
        for (let i = node.children.length - 1; i >= 0; i--) {
            processNode(node.children[i], elementInStoryboardFound || isElementDirectlyInStoryboard(node));
        }
        // Product decision: Filter out nodes that don't exist in storyboard file for the corresponding component URL
        //
        // Historical context:
        // Dec 14 - a bug was found where in cases that components were dynamically loaded (e.g. in Next JS _app.tsx), when you click
        // on the top level component it would point to this location in the codebase:
        //
        // function MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {
        //   return (
        //     <SessionProvider session={session}>
        //       <Component {...pageProps} />
        //       <Analytics />
        //     </SessionProvider>
        //   );
        // }
        //
        // This was especially an issue for component storyboards. Thus the decision was made to hide any top-level components or divs
        // that are not in the storyboard file
        const inComponentStoryboardAndSkip = storyboardType !== 'APPLICATION' &&
            !userNavigatedToNewRoute &&
            !elementInStoryboardFound &&
            !isElementDirectlyInStoryboard(node);
        // If this node doesn't have a codebaseId, move its children to its parent
        if (!((_a = node.tempoElement.codebaseId) === null || _a === void 0 ? void 0 : _a.startsWith('tempo-')) ||
            inComponentStoryboardAndSkip) {
            if (node.parent) {
                // Move the children in the spot where the node was
                const childrenToMove = node.children;
                const indexOfNodeInParent = (_b = node.parent.children) === null || _b === void 0 ? void 0 : _b.indexOf(node);
                node.parent.children.splice(indexOfNodeInParent, 1, ...childrenToMove);
                // Change the parent of all the children to the new parent
                childrenToMove.forEach((child) => {
                    child.parent = node.parent;
                });
                // Remove the node from the known nodes
                delete elementKeyToNavNode[node.tempoElement.getKey()];
            }
            else if (node.children.length === 1) {
                // This is the top-level node, move it down
                treeToReturn = node.children[0];
                delete elementKeyToNavNode[node.tempoElement.getKey()];
                treeToReturn.parent = undefined;
            }
            else if (node.children.length === 0) {
                // 0 children, no nav tree to return
                treeToReturn = {
                    children: [],
                    tempoElement: new tempoElement_1.TempoElement(exports.EMPTY_TREE_CODEBASE_ID, storyboardId, '1'),
                    name: '',
                };
                delete elementKeyToNavNode[node.tempoElement.getKey()];
            }
            else {
                // 2+ children, return this node, but make the codebase ID one to skip
                node.tempoElement = new tempoElement_1.TempoElement(exports.SKIP_ROOT_CODEBASE_ID, node.tempoElement.storyboardId, node.tempoElement.uniquePath);
                delete elementKeyToNavNode[node.tempoElement.getKey()];
            }
        }
    };
    processNode(finishedNavTree, false);
    const postProcess = (node, level) => {
        // Remove the react fiber node after processing
        delete node['reactFiberNode'];
        node.level = level;
        node.children.forEach((child) => {
            postProcess(child, node.tempoElement.codebaseId === exports.SKIP_ROOT_CODEBASE_ID
                ? level
                : level + 1);
        });
    };
    postProcess(treeToReturn, 0);
    return treeToReturn;
};
const addNavTreeBuiltCallback = (callbackToAdd) => {
    const { callbackFn, state } = callbackToAdd;
    const callbacks = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.NAV_TREE_CALLBACKS) || [];
    // Sort the multiSelectedElementKeys for consistency before adding
    state.multiSelectedElementKeys = (state.multiSelectedElementKeys || []).sort();
    const existingCallback = callbacks.find((callback) => callback.callbackFn.toString() === callbackFn.toString() &&
        callback.state.selectedElementKey === state.selectedElementKey &&
        callback.state.multiSelectedElementKeys.join(',') ===
            state.multiSelectedElementKeys.join(','));
    if (existingCallback) {
        return;
    }
    callbacks.push(callbackToAdd);
    (0, sessionStorageUtils_1.setMemoryStorageItem)(sessionStorageUtils_1.NAV_TREE_CALLBACKS, callbacks);
};
exports.addNavTreeBuiltCallback = addNavTreeBuiltCallback;
const runNavTreeBuiltCallbacks = () => {
    const callbacks = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.NAV_TREE_CALLBACKS) || [];
    if (!callbacks.length) {
        return;
    }
    const currentSelectedKey = (0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.SELECTED_ELEMENT_KEY);
    const multiSelectedElementKeys = ((0, sessionStorageUtils_1.getMemoryStorageItem)(sessionStorageUtils_1.MULTI_SELECTED_ELEMENT_KEYS) || []).sort();
    callbacks.forEach((callback) => {
        const { callbackFn, state } = callback;
        if (state.selectedElementKey === currentSelectedKey &&
            state.multiSelectedElementKeys.join(',') ===
                multiSelectedElementKeys.join(',')) {
            callbackFn();
        }
    });
    (0, sessionStorageUtils_1.removeMemoryStorageItem)(sessionStorageUtils_1.NAV_TREE_CALLBACKS);
};
exports.runNavTreeBuiltCallbacks = runNavTreeBuiltCallbacks;
