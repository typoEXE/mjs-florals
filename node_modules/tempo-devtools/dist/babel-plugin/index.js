"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const path_1 = __importDefault(require("path"));
const crypto_1 = __importDefault(require("crypto"));
// Must match the one in the tempo-api backend
const UUID5_NAMESPACE = '1b671a64-40d5-491e-99b0-da01ff1f3341';
module.exports = function (babel) {
    const { types: t } = babel;
    let skip = false;
    let genNumber = 0;
    let filename = '';
    let keyHashBase = '';
    /**
     * Important this is consistent across the SWC plugin, babel plugin and tempo backend
     */
    const getNextSeed = () => {
        const newSeed = `${filename}${genNumber}`;
        genNumber += 1;
        return newSeed;
    };
    return {
        // This method is called once before processing the file.
        pre(state) {
            skip = state.opts.filename.includes('node_modules/');
            const root = state.opts.root;
            filename = path_1.default.relative(root, state.opts.filename);
            genNumber = 0;
        },
        visitor: {
            Program(path, state) {
                const hash = crypto_1.default.createHash('sha1');
                hash.update(state.file.code);
                keyHashBase = hash.digest('base64');
            },
            JSXOpeningElement(path) {
                var _a;
                if (skip) {
                    return;
                }
                try {
                    const uuidToAssign = `tempo-${(0, uuid_1.v5)(getNextSeed(), UUID5_NAMESPACE)}`;
                    const node = path.node;
                    ///////////////////////////////////////////////////////
                    // Add the UUID to the class names
                    ///////////////////////////////////////////////////////
                    let foundClassName = false;
                    let foundKey = false;
                    node.attributes.forEach((attribute) => {
                        var _a, _b, _c, _d;
                        if (((_b = (_a = attribute.name) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'classname') {
                            foundClassName = true;
                            let valueToUse = null;
                            if (t.isLiteral(attribute.value)) {
                                valueToUse = attribute.value;
                            }
                            else if (t.isJSXExpressionContainer(attribute.value)) {
                                valueToUse = attribute.value.expression;
                            }
                            else {
                                throw Error(`Unknown attribute type!! + ${attribute.value.type}`);
                            }
                            const classesToSet = t.binaryExpression('+', valueToUse, t.stringLiteral(` ${uuidToAssign} `));
                            attribute.value = t.jsxExpressionContainer(classesToSet);
                        }
                        else if (((_d = (_c = attribute.name) === null || _c === void 0 ? void 0 : _c.name) === null || _d === void 0 ? void 0 : _d.toLowerCase()) === 'key') {
                            foundKey = true;
                        }
                    });
                    if (!foundClassName) {
                        const newClass = t.stringLiteral(uuidToAssign + ' ');
                        const newClassExpression = newClass;
                        node.attributes.push(t.jsxSpreadAttribute(t.objectExpression([
                            t.objectProperty(t.identifier('className'), newClassExpression),
                        ])));
                    }
                    // Always assign the UUID to this element itself for parsing in the frontend under tempoelementid
                    node.attributes.push(t.jsxSpreadAttribute(t.objectExpression([
                        t.objectProperty(t.identifier('tempoelementid'), t.stringLiteral(uuidToAssign)),
                    ])));
                    // Only if it's a component
                    if (!foundKey &&
                        ((_a = node === null || node === void 0 ? void 0 : node.name) === null || _a === void 0 ? void 0 : _a.name) &&
                        node.name.name[0].toLowerCase() === node.name.name[0]) {
                        const newKey = t.stringLiteral(keyHashBase + '-' + genNumber.toString());
                        node.attributes.push(t.jsxSpreadAttribute(t.objectExpression([
                            t.objectProperty(t.identifier('key'), newKey),
                        ])));
                    }
                }
                catch (e) {
                    console.log('Tempo babel plugin error: ' + e);
                }
            },
        },
    };
};
